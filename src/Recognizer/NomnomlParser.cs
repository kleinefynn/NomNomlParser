//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/!Files/!Coding/!CS/NomNoml/NomNoml/Grammar\Nomnoml.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class NomnomlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NAME=10, VERTICALBAR=11, SEMICOLON=12, COMMA=13, Association=14, Dependency=15, 
		Generalization=16, Implementation=17, Composition=18, Aggregation=19, 
		WS=20, PLUS=21, MINUS=22;
	public const int
		RULE_classifier = 0, RULE_type = 1, RULE_visibility = 2, RULE_variable = 3, 
		RULE_method = 4, RULE_parameter = 5, RULE_class = 6, RULE_association = 7, 
		RULE_dependency = 8, RULE_generalization = 9, RULE_implementation = 10, 
		RULE_composition = 11, RULE_aggregation = 12, RULE_note = 13, RULE_hidden = 14, 
		RULE_classInteraction = 15, RULE_interaction = 16, RULE_start = 17;
	public static readonly string[] ruleNames = {
		"classifier", "type", "visibility", "variable", "method", "parameter", 
		"class", "association", "dependency", "generalization", "implementation", 
		"composition", "aggregation", "note", "hidden", "classInteraction", "interaction", 
		"start"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'>'", "':'", "'('", "')'", "'['", "']'", "'--'", "'-/-'", 
		null, "'|'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NAME", "VERTICALBAR", 
		"SEMICOLON", "COMMA", "Association", "Dependency", "Generalization", "Implementation", 
		"Composition", "Aggregation", "WS", "PLUS", "MINUS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nomnoml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NomnomlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NomnomlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NomnomlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ClassifierContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NomnomlParser.NAME, 0); }
		public ClassifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterClassifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitClassifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassifierContext classifier() {
		ClassifierContext _localctx = new ClassifierContext(Context, State);
		EnterRule(_localctx, 0, RULE_classifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__0);
			State = 37; Match(NAME);
			State = 38; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NomnomlParser.NAME, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(NomnomlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(NomnomlParser.MINUS, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 4, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NomnomlParser.NAME, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 6, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 44; visibility();
				}
			}

			State = 47; Match(NAME);
			State = 48; Match(T__2);
			State = 49; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NomnomlParser.NAME, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NomnomlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NomnomlParser.COMMA, i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 8, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 51; visibility();
				}
			}

			State = 54; Match(NAME);
			State = 55; Match(T__3);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 56; parameter();
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 57; Match(COMMA);
					State = 58; parameter();
					}
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 66; Match(T__4);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 67; Match(T__2);
				State = 68; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NomnomlParser.NAME, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(NAME);
			State = 72; Match(T__2);
			State = 73; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NomnomlParser.NAME, 0); }
		public ClassifierContext classifier() {
			return GetRuleContext<ClassifierContext>(0);
		}
		public ITerminalNode[] VERTICALBAR() { return GetTokens(NomnomlParser.VERTICALBAR); }
		public ITerminalNode VERTICALBAR(int i) {
			return GetToken(NomnomlParser.VERTICALBAR, i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(NomnomlParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(NomnomlParser.SEMICOLON, i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 12, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(T__5);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 76; classifier();
				}
			}

			State = 79; Match(NAME);
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 80; Match(VERTICALBAR);
				State = 81; variable();
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON) {
					{
					{
					State = 82; Match(SEMICOLON);
					State = 83; variable();
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VERTICALBAR) {
				{
				State = 91; Match(VERTICALBAR);
				State = 92; method();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON) {
					{
					{
					State = 93; Match(SEMICOLON);
					State = 94; method();
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 102; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		public ITerminalNode Association() { return GetToken(NomnomlParser.Association, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(Context, State);
		EnterRule(_localctx, 14, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(Association);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependencyContext : ParserRuleContext {
		public ITerminalNode Dependency() { return GetToken(NomnomlParser.Dependency, 0); }
		public DependencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependency; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterDependency(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitDependency(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DependencyContext dependency() {
		DependencyContext _localctx = new DependencyContext(Context, State);
		EnterRule(_localctx, 16, RULE_dependency);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(Dependency);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralizationContext : ParserRuleContext {
		public ITerminalNode Generalization() { return GetToken(NomnomlParser.Generalization, 0); }
		public GeneralizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalization; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterGeneralization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitGeneralization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralizationContext generalization() {
		GeneralizationContext _localctx = new GeneralizationContext(Context, State);
		EnterRule(_localctx, 18, RULE_generalization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(Generalization);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementationContext : ParserRuleContext {
		public ITerminalNode Implementation() { return GetToken(NomnomlParser.Implementation, 0); }
		public ImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementationContext implementation() {
		ImplementationContext _localctx = new ImplementationContext(Context, State);
		EnterRule(_localctx, 20, RULE_implementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(Implementation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositionContext : ParserRuleContext {
		public ITerminalNode Composition() { return GetToken(NomnomlParser.Composition, 0); }
		public CompositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composition; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterComposition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitComposition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositionContext composition() {
		CompositionContext _localctx = new CompositionContext(Context, State);
		EnterRule(_localctx, 22, RULE_composition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(Composition);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationContext : ParserRuleContext {
		public ITerminalNode Aggregation() { return GetToken(NomnomlParser.Aggregation, 0); }
		public AggregationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregation; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterAggregation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitAggregation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationContext aggregation() {
		AggregationContext _localctx = new AggregationContext(Context, State);
		EnterRule(_localctx, 24, RULE_aggregation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(Aggregation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteContext : ParserRuleContext {
		public NoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterNote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitNote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteContext note() {
		NoteContext _localctx = new NoteContext(Context, State);
		EnterRule(_localctx, 26, RULE_note);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HiddenContext : ParserRuleContext {
		public HiddenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hidden; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterHidden(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitHidden(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHidden(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HiddenContext hidden() {
		HiddenContext _localctx = new HiddenContext(Context, State);
		EnterRule(_localctx, 28, RULE_hidden);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInteractionContext : ParserRuleContext {
		public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		public InteractionContext interaction() {
			return GetRuleContext<InteractionContext>(0);
		}
		public ITerminalNode[] NAME() { return GetTokens(NomnomlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(NomnomlParser.NAME, i);
		}
		public ClassInteractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInteraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterClassInteraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitClassInteraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInteraction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInteractionContext classInteraction() {
		ClassInteractionContext _localctx = new ClassInteractionContext(Context, State);
		EnterRule(_localctx, 30, RULE_classInteraction);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 120; @class();
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 121; Match(NAME);
					}
				}

				{
				State = 124; interaction();
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 125; Match(NAME);
					}
				}

				State = 128; @class();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; @class();
				State = 131; Match(NAME);
				State = 132; @class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractionContext : ParserRuleContext {
		public AssociationContext association() {
			return GetRuleContext<AssociationContext>(0);
		}
		public DependencyContext dependency() {
			return GetRuleContext<DependencyContext>(0);
		}
		public GeneralizationContext generalization() {
			return GetRuleContext<GeneralizationContext>(0);
		}
		public ImplementationContext implementation() {
			return GetRuleContext<ImplementationContext>(0);
		}
		public CompositionContext composition() {
			return GetRuleContext<CompositionContext>(0);
		}
		public AggregationContext aggregation() {
			return GetRuleContext<AggregationContext>(0);
		}
		public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		public InteractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterInteraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitInteraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteraction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractionContext interaction() {
		InteractionContext _localctx = new InteractionContext(Context, State);
		EnterRule(_localctx, 32, RULE_interaction);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Association:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; association();
				}
				break;
			case Dependency:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; dependency();
				}
				break;
			case Generalization:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138; generalization();
				}
				break;
			case Implementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139; implementation();
				}
				break;
			case Composition:
				EnterOuterAlt(_localctx, 5);
				{
				State = 140; composition();
				}
				break;
			case Aggregation:
				EnterOuterAlt(_localctx, 6);
				{
				State = 141; aggregation();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 142; note();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(NomnomlParser.Eof, 0); }
		public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		public ClassInteractionContext[] classInteraction() {
			return GetRuleContexts<ClassInteractionContext>();
		}
		public ClassInteractionContext classInteraction(int i) {
			return GetRuleContext<ClassInteractionContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INomnomlListener typedListener = listener as INomnomlListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INomnomlVisitor<TResult> typedVisitor = visitor as INomnomlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 34, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 145; @class();
				}
				break;
			case 2:
				{
				State = 146; classInteraction();
				}
				break;
			}
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				State = 151;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 149; @class();
					}
					break;
				case 2:
					{
					State = 150; classInteraction();
					}
					break;
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\xA1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x5', 
		'\x5', '\x30', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x5', '\x6', '\x37', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'>', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x41', '\v', '\x6', '\x5', 
		'\x6', '\x43', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'P', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'W', '\n', '\b', '\f', '\b', '\xE', '\b', 'Z', '\v', '\b', '\x5', '\b', 
		'\\', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x62', '\n', '\b', '\f', '\b', '\xE', '\b', '\x65', '\v', 
		'\b', '\x5', '\b', 'g', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '}', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x81', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x89', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x92', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x96', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x9A', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x9D', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '\x2', '\x3', '\x3', '\x2', '\x17', '\x18', '\x2', 
		'\xA4', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '/', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'M', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'j', '\x3', '\x2', '\x2', '\x2', '\x12', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'n', '\x3', '\x2', '\x2', '\x2', '\x16', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'r', '\x3', '\x2', '\x2', '\x2', '\x1A', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'v', '\x3', '\x2', '\x2', '\x2', '\x1E', 'x', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x88', '\x3', '\x2', '\x2', '\x2', '\"', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x95', '\x3', '\x2', '\x2', '\x2', '&', 
		'\'', '\a', '\x3', '\x2', '\x2', '\'', '(', '\a', '\f', '\x2', '\x2', 
		'(', ')', '\a', '\x4', '\x2', '\x2', ')', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\f', '\x2', '\x2', '+', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\t', '\x2', '\x2', '\x2', '-', '\a', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\x5', '\x6', '\x4', '\x2', '/', '.', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\f', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\x5', '\x2', '\x2', '\x33', '\x34', '\x5', '\x4', 
		'\x3', '\x2', '\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', 
		'\x5', '\x6', '\x4', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\f', '\x2', '\x2', '\x39', '\x42', 
		'\a', '\x6', '\x2', '\x2', ':', '?', '\x5', '\f', '\a', '\x2', ';', '<', 
		'\a', '\xF', '\x2', '\x2', '<', '>', '\x5', '\f', '\a', '\x2', '=', ';', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', 
		'=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x42', ':', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'G', '\a', '\a', '\x2', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', '\x2', 
		'\x46', 'H', '\x5', '\x4', '\x3', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\a', '\f', '\x2', '\x2', 'J', 'K', '\a', '\x5', 
		'\x2', '\x2', 'K', 'L', '\x5', '\x4', '\x3', '\x2', 'L', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'O', '\a', '\b', '\x2', '\x2', 'N', 'P', '\x5', 
		'\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '[', '\a', 
		'\f', '\x2', '\x2', 'R', 'S', '\a', '\r', '\x2', '\x2', 'S', 'X', '\x5', 
		'\b', '\x5', '\x2', 'T', 'U', '\a', '\xE', '\x2', '\x2', 'U', 'W', '\x5', 
		'\b', '\x5', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', 
		'\x3', '\x2', '\x2', '\x2', '[', 'R', '\x3', '\x2', '\x2', '\x2', '[', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x66', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\a', '\r', '\x2', '\x2', '^', '\x63', '\x5', '\n', '\x6', '\x2', 
		'_', '`', '\a', '\xE', '\x2', '\x2', '`', '\x62', '\x5', '\n', '\x6', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\t', '\x2', '\x2', 'i', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x10', '\x2', '\x2', 'k', 
		'\x11', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x11', '\x2', '\x2', 
		'm', '\x13', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x12', '\x2', 
		'\x2', 'o', '\x15', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x13', 
		'\x2', '\x2', 'q', '\x17', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', 
		'\x14', '\x2', '\x2', 's', '\x19', '\x3', '\x2', '\x2', '\x2', 't', 'u', 
		'\a', '\x15', '\x2', '\x2', 'u', '\x1B', '\x3', '\x2', '\x2', '\x2', 'v', 
		'w', '\a', '\n', '\x2', '\x2', 'w', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\v', '\x2', '\x2', 'y', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\x5', '\xE', '\b', '\x2', '{', '}', '\a', '\f', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x5', '\"', 
		'\x12', '\x2', '\x7F', '\x81', '\a', '\f', '\x2', '\x2', '\x80', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x5', '\xE', 
		'\b', '\x2', '\x83', '\x89', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\x5', '\xE', '\b', '\x2', '\x85', '\x86', '\a', '\f', '\x2', '\x2', '\x86', 
		'\x87', '\x5', '\xE', '\b', '\x2', '\x87', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x88', 'z', '\x3', '\x2', '\x2', '\x2', '\x88', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '!', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x92', '\x5', '\x10', '\t', '\x2', '\x8B', '\x92', '\x5', '\x12', '\n', 
		'\x2', '\x8C', '\x92', '\x5', '\x14', '\v', '\x2', '\x8D', '\x92', '\x5', 
		'\x16', '\f', '\x2', '\x8E', '\x92', '\x5', '\x18', '\r', '\x2', '\x8F', 
		'\x92', '\x5', '\x1A', '\xE', '\x2', '\x90', '\x92', '\x5', '\x1C', '\xF', 
		'\x2', '\x91', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '#', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x96', '\x5', '\xE', '\b', '\x2', '\x94', '\x96', '\x5', ' ', '\x11', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x9A', '\x5', '\xE', '\b', '\x2', '\x98', '\x9A', '\x5', ' ', '\x11', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x2', '\x2', '\x3', '\x9F', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x13', '/', '\x36', '?', '\x42', 'G', 
		'O', 'X', '[', '\x63', '\x66', '|', '\x80', '\x88', '\x91', '\x95', '\x99', 
		'\x9B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
